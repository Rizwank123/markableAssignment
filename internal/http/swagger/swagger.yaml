basePath: /api/v1
definitions:
  Address:
    properties:
      city:
        example: Ahmedabad
        type: string
      country:
        example: India
        type: string
      location:
        example: Ahmedabad
        type: string
      pincode:
        example: "380009"
        type: string
      state:
        example: Gujarat
        type: string
      street:
        example: Near Railway Station
        type: string
    type: object
  BaseResponse:
    properties:
      data: {}
    type: object
  CreatePatientInput:
    properties:
      address:
        $ref: '#/definitions/Address'
      age:
        example: 26
        type: integer
      disease:
        example: Diabetes
        type: string
      email:
        example: raj.singhaniya@gmail.com
        type: string
      first_name:
        example: Raj
        type: string
      last_name:
        example: Singhaniya
        type: string
      phone:
        example: +91 9876543210
        type: string
    type: object
  CreateUserInput:
    properties:
      full_name:
        example: John Doe
        type: string
      password:
        example: password123
        type: string
      role:
        allOf:
        - $ref: '#/definitions/github_com_markable_internal_domain.UserRole'
        example: RECEPTIONIST
      user_name:
        example: "+919984778491"
        type: string
    type: object
  ForbiddenAccessError:
    properties:
      code:
        example: FORBIDDEN_ACCESS
        type: string
      message:
        example: You are forbidden from accessing this resource
        type: string
    type: object
  InvalidRequestError:
    properties:
      message:
        example: invalid request
        type: string
    type: object
  LoginInput:
    properties:
      password:
        type: string
      user_name:
        example: +919984778491 or example
        type: string
    type: object
  LoginOutput:
    properties:
      expires_in:
        type: integer
      token:
        type: string
    type: object
  NotFoundError:
    type: object
  Patient:
    properties:
      address:
        $ref: '#/definitions/Address'
      age:
        example: 26
        type: integer
      created_at:
        type: string
      disease:
        example: Diabetes
        type: string
      email:
        example: raj.singhaniya@gmail.com
        type: string
      first_name:
        example: Raj
        type: string
      id:
        example: ""
        type: string
      last_name:
        example: Singhaniya
        type: string
      phone:
        example: +91 9876543210
        type: string
      updated_at:
        type: string
    type: object
  SystemError:
    properties:
      code:
        example: INTERNAL_SERVER_ERROR
        type: string
      message:
        example: Oops! Something went wrong. Please try again later
        type: string
    type: object
  UnauthorizedError:
    properties:
      code:
        example: UNAUTHORIZED
        type: string
      message:
        example: You are not authorized to access this resource
        type: string
    type: object
  UpdatePatientInput:
    properties:
      address:
        $ref: '#/definitions/Address'
      age:
        example: 26
        type: integer
      disease:
        example: Diabetes
        type: string
      email:
        example: raj.singhaniya@gmail.com
        type: string
      first_name:
        example: Raj
        type: string
      last_name:
        example: Singhaniya
        type: string
      phone:
        example: +91 9876543210
        type: string
    type: object
  User:
    properties:
      created_at:
        type: string
      full_name:
        example: John Doe
        type: string
      id:
        example: ""
        type: string
      role:
        example: RECEPTIONIST
        type: string
      updated_at:
        type: string
      user_name:
        example: "+919984778491"
        type: string
    type: object
  github_com_markable_internal_domain.UserRole:
    enum:
    - DOCTOR
    - RECEPTIONIST
    type: string
    x-enum-varnames:
    - UserRoleDoctor
    - UserRoleRECEPTIONIST
host: localhost:7700
info:
  contact:
    email: md.rizwank431@gmail.com
    name: Mohammad Developer
    url: https://rizwank123.github.io
  description: Markable application's set of APIs
  termsOfService: https://example.com/terms
  title: Markable API
  version: "1.0"
paths:
  /patients:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all patients
      operationId: findAllPatients
      parameters:
      - description: 'Bearer '
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/BaseResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/Patient'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/UnauthorizedError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ForbiddenAccessError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/SystemError'
      security:
      - JWT: []
      summary: Find all patients
      tags:
      - Patient
    post:
      consumes:
      - application/json
      description: Creates a patient with the provided input
      operationId: createPatient
      parameters:
      - description: 'Bearer '
        in: header
        name: Authorization
        required: true
        type: string
      - description: Patient data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/CreatePatientInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/Patient'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/InvalidRequestError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/UnauthorizedError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ForbiddenAccessError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/SystemError'
      security:
      - JWT: []
      summary: Create a new patient
      tags:
      - Patient
  /patients/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a patient based on the provided ID
      operationId: deletePatient
      parameters:
      - description: 'Bearer '
        in: header
        name: Authorization
        required: true
        type: string
      - description: Patient ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/BaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/InvalidRequestError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/UnauthorizedError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ForbiddenAccessError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/NotFoundError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/SystemError'
      security:
      - JWT: []
      summary: Delete a patient by ID
      tags:
      - Patient
    get:
      consumes:
      - application/json
      description: Find a patient based on the provided ID
      operationId: findPatientByID
      parameters:
      - description: 'Bearer '
        in: header
        name: Authorization
        required: true
        type: string
      - description: Patient ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/Patient'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/InvalidRequestError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/UnauthorizedError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ForbiddenAccessError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/SystemError'
      security:
      - JWT: []
      summary: Find a patient by ID
      tags:
      - Patient
    put:
      consumes:
      - application/json
      description: Updates the patient based on the provided ID and input data
      operationId: updatePatient
      parameters:
      - description: 'Bearer '
        in: header
        name: Authorization
        required: true
        type: string
      - description: Patient ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated patient data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/UpdatePatientInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/Patient'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/InvalidRequestError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/UnauthorizedError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ForbiddenAccessError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/NotFoundError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/SystemError'
      security:
      - JWT: []
      summary: Update a patient by ID
      tags:
      - Patient
  /users:
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/CreateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/InvalidRequestError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/UnauthorizedError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ForbiddenAccessError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/SystemError'
      summary: Register a new user
      tags:
      - Auth
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Find a user based on the provided ID
      operationId: findUserByID
      parameters:
      - description: 'Bearer '
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/InvalidRequestError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/UnauthorizedError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/ForbiddenAccessError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/SystemError'
      security:
      - JWT: []
      summary: Find a user by ID
      tags:
      - User
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user using provided credentials
      operationId: userLogin
      parameters:
      - description: Login input
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/LoginOutput'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/InvalidRequestError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/UnauthorizedError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/SystemError'
      summary: User login
      tags:
      - Auth
schemes:
- http
- https
securityDefinitions:
  JWT:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
